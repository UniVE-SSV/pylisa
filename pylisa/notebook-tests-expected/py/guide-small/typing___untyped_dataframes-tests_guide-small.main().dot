digraph {
	"node0" [shape="rect",color="black",label=<import pandas as pd<BR/>{{<BR/>heap [[ #TOP# ]]<BR/>value [[ #TOP# ]]<BR/>}} -&gt; [skip]>];
	"node1" [shape="rect",color="gray",label=<head(df, 10)<BR/>{{<BR/>heap [[ df: [heap[s]:pp@'dataframes-tests/guide-small.py':2:31] ]]<BR/>value [[ df: [pandas.DataFrame*]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':2:31: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':3:10: [pandas.DataFrame]<BR/>[stack: [pandas.DataFrame*]] ]]<BR/>}} -&gt; [ref$heap[s]:pp@'dataframes-tests/guide-small.py':3:10]>];
	"node2" [shape="rect",color="gray",label=<[](df, 'Mes') = to_datetime(pd, [](df, 'Mes'))<BR/>{{<BR/>heap [[ df: [heap[s]:pp@'dataframes-tests/guide-small.py':2:31] ]]<BR/>value [[ df: [pandas.DataFrame*]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':2:31: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':3:10: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':4:36: [pandas.DataFrame]<BR/>[stack: [pandas.Series*]] ]]<BR/>}} -&gt; [*(df)-&gt;'Mes']>];
	"node3" [shape="rect",color="gray",label=<df = read_csv(pd, 'temporal.csv')<BR/>{{<BR/>heap [[ df: [heap[s]:pp@'dataframes-tests/guide-small.py':2:31] ]]<BR/>value [[ df: [pandas.DataFrame*]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':2:31: [pandas.DataFrame]<BR/>[stack: [pandas.DataFrame*]] ]]<BR/>}} -&gt; [df]>];
	"node4" [shape="rect",color="gray",label=<[](df2, 'Longitude') = apply([](df2, 'geometry'), lambda [l] : l::x)<BR/>{{<BR/>heap [[ df: [heap[s]:pp@'dataframes-tests/guide-small.py':2:31]<BR/>df2: [heap[s]:pp@'dataframes-tests/guide-small.py':6:28] ]]<BR/>value [[ df: [pandas.DataFrame*]<BR/>df2: [pandas.DataFrame*]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':10:54: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':2:31: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':3:10: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':4:36: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':6:28: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':8:59: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':9:53: [pandas.DataFrame]<BR/>[stack: [pandas.Series*]] ]]<BR/>}} -&gt; [*(df2)-&gt;'Longitude']>];
	"node5" [shape="rect",color="gray",label=<from geopandas.tools import geopandas.tools as geocode<BR/>{{<BR/>heap [[ df: [heap[s]:pp@'dataframes-tests/guide-small.py':2:31] ]]<BR/>value [[ df: [pandas.DataFrame*]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':2:31: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':3:10: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':4:36: [pandas.DataFrame]<BR/>[stack: _|_] ]]<BR/>}} -&gt; [skip]>];
	"node6" [shape="rect",color="gray",label=<df3 = concat(pd, list(df, df2))<BR/>{{<BR/>heap [[ df: [heap[s]:pp@'dataframes-tests/guide-small.py':2:31]<BR/>df2: [heap[s]:pp@'dataframes-tests/guide-small.py':6:28]<BR/>df3: [heap[s]:pp@'dataframes-tests/guide-small.py':15:25] ]]<BR/>value [[ df: [pandas.DataFrame*]<BR/>df2: [pandas.DataFrame*]<BR/>df3: [pandas.DataFrame*]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':10:54: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':15:25: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':2:31: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':3:10: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':4:36: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':6:28: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':8:59: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':9:53: [pandas.DataFrame]<BR/>[stack: [pandas.DataFrame*]] ]]<BR/>}} -&gt; [df3]>];
	"node7" [shape="rect",color="gray",label=<[](df2::loc, &lt;([](df2, &quot;col2&quot;), 5), list('cool-col')) = 100<BR/>{{<BR/>heap [[ df: [heap[s]:pp@'dataframes-tests/guide-small.py':2:31]<BR/>df2: [heap[s]:pp@'dataframes-tests/guide-small.py':6:28] ]]<BR/>value [[ df: [pandas.DataFrame*]<BR/>df2: [pandas.DataFrame*]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':10:54: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':2:31: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':3:10: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':4:36: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':6:28: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':8:59: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':9:53: [pandas.DataFrame]<BR/>[stack: [pandas.DataFrame]] ]]<BR/>}} -&gt; [*(*(df2)-&gt;*(df2) &lt; 5)-&gt;[['cool-col']]]>];
	"node8" [shape="rect",color="gray",label=<df2 = read_csv(pd, 'mapa.csv')<BR/>{{<BR/>heap [[ df: [heap[s]:pp@'dataframes-tests/guide-small.py':2:31]<BR/>df2: [heap[s]:pp@'dataframes-tests/guide-small.py':6:28] ]]<BR/>value [[ df: [pandas.DataFrame*]<BR/>df2: [pandas.DataFrame*]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':2:31: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':3:10: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':4:36: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':6:28: [pandas.DataFrame]<BR/>[stack: [pandas.DataFrame*]] ]]<BR/>}} -&gt; [df2]>];
	"node9" [shape="rect",color="gray",label=<[](df2, 'Latitude') = apply([](df2, 'geometry'), lambda [l] : l::y)<BR/>{{<BR/>heap [[ df: [heap[s]:pp@'dataframes-tests/guide-small.py':2:31]<BR/>df2: [heap[s]:pp@'dataframes-tests/guide-small.py':6:28] ]]<BR/>value [[ df: [pandas.DataFrame*]<BR/>df2: [pandas.DataFrame*]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':2:31: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':3:10: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':4:36: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':6:28: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':8:59: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':9:53: [pandas.DataFrame]<BR/>[stack: [pandas.Series*]] ]]<BR/>}} -&gt; [*(df2)-&gt;'Latitude']>];
	"node10" [shape="rect",color="gray",label=<[](df2, 'geometry') = [](geocode([](df2, 'Pa&iacute;s'), provider=('nominatim')), 'geometry')<BR/>{{<BR/>heap [[ df: [heap[s]:pp@'dataframes-tests/guide-small.py':2:31]<BR/>df2: [heap[s]:pp@'dataframes-tests/guide-small.py':6:28] ]]<BR/>value [[ df: [pandas.DataFrame*]<BR/>df2: [pandas.DataFrame*]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':2:31: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':3:10: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':4:36: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':6:28: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':8:59: [pandas.DataFrame]<BR/>[stack: [pandas.Series*]] ]]<BR/>}} -&gt; [*(df2)-&gt;'geometry']>];
	"node11" [shape="rect",color="black",peripheries="2",label=<ret<BR/>{{<BR/>heap [[ df: [heap[s]:pp@'dataframes-tests/guide-small.py':2:31]<BR/>df2: [heap[s]:pp@'dataframes-tests/guide-small.py':6:28]<BR/>df3: [heap[s]:pp@'dataframes-tests/guide-small.py':15:25]<BR/>df4: [heap[s]:pp@'dataframes-tests/guide-small.py':18:17] ]]<BR/>value [[ df: [pandas.DataFrame*]<BR/>df2: [pandas.DataFrame*]<BR/>df3: [pandas.DataFrame*]<BR/>df4: [pandas.DataFrame*]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':10:54: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':15:25: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':18:17: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':2:31: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':3:10: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':4:36: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':6:28: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':8:59: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':9:53: [pandas.DataFrame]<BR/>[stack: _|_] ]]<BR/>}} -&gt; [skip]>];
	"node12" [shape="rect",color="gray",label=<dropna(df2, axis=(0), inplace=(true))<BR/>{{<BR/>heap [[ df: [heap[s]:pp@'dataframes-tests/guide-small.py':2:31]<BR/>df2: [heap[s]:pp@'dataframes-tests/guide-small.py':6:28] ]]<BR/>value [[ df: [pandas.DataFrame*]<BR/>df2: [pandas.DataFrame*]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':2:31: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':3:10: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':4:36: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':6:28: [pandas.DataFrame]<BR/>[stack: [pandas.DataFrame*]] ]]<BR/>}} -&gt; [df2]>];
	"node13" [shape="rect",color="gray",label=<df4 = join(df, df2)<BR/>{{<BR/>heap [[ df: [heap[s]:pp@'dataframes-tests/guide-small.py':2:31]<BR/>df2: [heap[s]:pp@'dataframes-tests/guide-small.py':6:28]<BR/>df3: [heap[s]:pp@'dataframes-tests/guide-small.py':15:25]<BR/>df4: [heap[s]:pp@'dataframes-tests/guide-small.py':18:17] ]]<BR/>value [[ df: [pandas.DataFrame*]<BR/>df2: [pandas.DataFrame*]<BR/>df3: [pandas.DataFrame*]<BR/>df4: [pandas.DataFrame*]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':10:54: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':15:25: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':18:17: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':2:31: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':3:10: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':4:36: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':6:28: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':8:59: [pandas.DataFrame]<BR/>heap[s]:pp@'dataframes-tests/guide-small.py':9:53: [pandas.DataFrame]<BR/>[stack: [pandas.DataFrame*]] ]]<BR/>}} -&gt; [df4]>];
	"node1" -> "node2" [color="black"];
	"node2" -> "node5" [color="black"];
	"node0" -> "node3" [color="black"];
	"node3" -> "node1" [color="black"];
	"node4" -> "node7" [color="black"];
	"node5" -> "node8" [color="black"];
	"node6" -> "node13" [color="black"];
	"node7" -> "node6" [color="black"];
	"node8" -> "node12" [color="black"];
	"node9" -> "node4" [color="black"];
	"node10" -> "node9" [color="black"];
	"node12" -> "node10" [color="black"];
	"node13" -> "node11" [color="black"];
subgraph cluster_legend {
	label="Legend";
	style=dotted;
	node [shape=plaintext];
	"legend" [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0"><tr><td align="right">node border&nbsp;</td><td align="left"><font color="gray">gray</font>, single</td></tr><tr><td align="right">entrypoint border&nbsp;</td><td align="left"><font color="black">black</font>, single</td></tr><tr><td align="right">exitpoint border&nbsp;</td><td align="left"><font color="black">black</font>, double</td></tr><tr><td align="right">sequential edge&nbsp;</td><td align="left"><font color="black">black</font>, solid</td></tr><tr><td align="right">true edge&nbsp;</td><td align="left"><font color="blue">blue</font>, dashed</td></tr><tr><td align="right">false edge&nbsp;</td><td align="left"><font color="red">red</font>, dashed</td></tr></table>>];
}

}

plugins {
    id 'java'
    id 'application'
   	id 'antlr'
   	id 'eclipse'
   	id "com.diffplug.spotless" version "6.2.0"
}

repositories {
    mavenCentral()
    maven {
        name = 'GitHubPackages'
        url = 'https://maven.pkg.github.com/UniVE-SSV/lisa'
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
        }
    }
}

group = 'it.unive'
version = '0.1'
mainClassName = 'it.unive.pylisa.cli.CLI'

dependencies {
    implementation 'com.github.unive-ssv:lisa-core:0.1b5-SNAPSHOT'
    antlr 'org.antlr:antlr4:4.8-1'    
    testImplementation 'junit:junit:4.12'
    implementation 'com.google.code.gson:gson:2.8.7'
}

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ["-visitor", "-no-listener"]
    
        doLast {
    	copy {
      		from 'build/generated-src/antlr/main/'
      		include '*.*'
      		into 'build/generated-src/antlr/main/it/unive/pylisa/antlr'
    	}
   		project.delete fileTree('build/generated-src/antlr/main').include('*.*')
  	}
}

spotless {
    enforceCheck = false
    encoding 'UTF-8'
    lineEndings 'UNIX'
    java {
        // tabs, no spaces
        indentWithTabs()
    
        // keep imports clean 
        importOrder() 
        removeUnusedImports()
    
        // use the eclipse formatting with the one provided with the project
        eclipse().configFile(new File(rootProject.projectDir, 'spotless-formatting.xml'))
    
        // ignore generated code
        target project.fileTree(project.projectDir) {
            include '**/*.java'
            exclude '**/build/generated/**'
            exclude '**/build/generated-src/**'
            exclude '**/target/generated-sources/**'
        }
    }
    antlr4 {
        target 'src/*/antlr/**/*.g4'
        antlr4Formatter() 
    }
}

spotlessJava {
	// declaring explicit dependencies
	dependsOn 'compileJava', 'compileTestJava', 'processTestResources', 'spotlessAntlr4'
}

spotlessJavaCheck { 
    finalizedBy 'spotlessErrorMessage'
}

spotlessAntlr4Check { 
    finalizedBy 'spotlessErrorMessage'
}

task spotlessErrorMessage {
    onlyIf {
        spotlessJavaCheck.state.failure != null || spotlessAntlr4Check.state.failure != null
    }
    doLast {
        logger.error('Spotless plugin thrown an error. This means that the code is not correctly formatted.')
        logger.error('To reproduce locally, execute \'./gradlew spotlessCheck\'')
        logger.error('To automatically fix all the problems, execute \'./gradlew spotlessApply\'')
    }
}